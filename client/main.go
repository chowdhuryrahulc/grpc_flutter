package main

import (
	"bufio"
	"context"
	"crypto/sha256"
	"encoding/hex"
	"flag"
	"fmt"

	// "go/scanner"
	proto "lco/gen"
	"log"
	"os"
	"sync"
	"time"

	// "github.com/golang/protobuf/ptypes/timestamp"
	"google.golang.org/grpc"
	"google.golang.org/grpc/encoding/gzip" 
)

// ERROR caused: in client, we use proto.BroadcastClient.
// And in server we use proto.BroadcastServer
var client proto.BroadcastClient
var wait *sync.WaitGroup

func init(){
	wait = &sync.WaitGroup{}
}

//todo Didnt understand connect?
func connect(user *proto.User) error {
	var streamerror error

	// rpc function 
	stream, err := client.CreateStream(context.Background(), &proto.Connect{
		//// rpc CreateStream(Connect) returns (stream Message);
		User: user,
		Active: true,
	})
	if err != nil {
		fmt.Errorf("connection failed :%v",err)
	}

	wait.Add(1)
	go func(str proto.Broadcast_CreateStreamClient){ // go routine
		defer wait.Done()

		for{		// this loop is infinite
			msg, err := str.Recv() // recv means recieve msg from server
			if err != nil {
				streamerror = fmt.Errorf("error reading message: %v", err)
				break
			}

			fmt.Printf("%v : %s\n", msg.Id, msg.Content) // printing msg in terminal (id and content)
		}
	}(stream)

	return streamerror
}

func main(){
	timestamp := time.Now()
	done := make(chan int) // integer channel

//todo What is flag? flag.string?
	// user enters his name
	name := flag.String("N", "Anon", "The name of the user")
	// "N" is passed by user. If nothing is passed, name will be "Anon" by default. 
	// "The name of the user" is the helper string
	flag.Parse() // making sure name variable has something, before creating hash
	// Autogenerated id of user (timestamp + name converted into byte, and then use sha256 hashing function over it)
	id := sha256.Sum256([]byte(timestamp.String() + *name))

	conn, err := grpc.Dial("localhost:8080", grpc.WithInsecure())
	// docker will be serving from localhost:8080
		if err != nil {
			log.Fatalf("Couldnt connect to service: %v",err)
		}

		client = proto.NewBroadcastClient(conn)
		user := &proto.User{
			Id: hex.EncodeToString(id[:]),
			Name: *name,
		}
		connect(user)
		
		wait.Add(1)
		go func(){
			defer wait.Done()
			// NewScanner scans input from the user. Input is recieved by os.standard input
			// User inputs in od.stdin through CLI. And we create msg using that input
			scanner := bufio.NewScanner(os.Stdin)
			for scanner.Scan(){	// this loops until there is no more input frm the user
				// We put the msg in this &proto.Message
				msg := &proto.Message{						//! Sending msg
					Id: user.Id,
					Content: scanner.Text(),
					Timestamp: timestamp.String(),
				}

				_, err := client.BroadcastMessage(context.Background(), msg, 
				grpc.UseCompressor(gzip.Name),
				) 
				////  rpc BroadcastMessage(Message) returns (Close);
				// Seems like BroadcastMsg sends message
				if err != nil {
					fmt.Printf("errorSending Message:5v", err)
					break
				}
			}
		}()

		go func(){			
			// wait for go routine to end, then close on done channel
			wait.Wait()
			close(done)
		}()
		<-done
}